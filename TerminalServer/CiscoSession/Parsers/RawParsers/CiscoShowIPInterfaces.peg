@namespace TerminalServer.CiscoSession.Parsers
@classname CiscoShowIPInterfaces

@members {
  enum EEnabledState {
   Unknown,
   NotPresent,
   Enabled,
   Disabled
  }
}

ShowInterfaces
 = CLICommand Interface*  
 
CLICommand
 = 'show ip interface' WS? 
 
Interface
 = InterfaceID WS? 'is' WS? 
   LineStatus 
   ProtocolStatus 
   InternetProtocolParsing?
   InternetAddress?
   InternetAddressUnnumbered?
   BroadcastAddress?
   AddressDeterminedBy?
   MTU?
   HelperAddress?
   DirectedBroadcastForwarding?
   MulticastReservedGroupsJoined?
   OutgoingAccessList?
   InboundAccessList?
   ProxyARP?
   LocalProxyARP?
   SecurityLevel?
   SplitHorizon?
   ICMPRedirects?
   ICMPUnreachables?
   ICMPMaskReplies?
   IPFastSwitching?
   IPFastSwitchingOnSameInterface?
   IPFlowSwitching?
   IPCEFSwitching?
   IPCEFSwitchingTurboVector?
   IPNullTurboVector?
   IPNullTurboVector?
   IPMulticastFastSwitching?
   IPMulticastDistributedFastSwitching?
   IPRouteCacheFlags?
   RouterDiscovery?
   IPOutputPacketAccounting?
   IPAccessViolationAccounting?
   TCPIPHeaderCompression?
   RTPIPHeaderCompression?
   ProbeProxyNames?
   PolicyRouting?
   NetworkAddressTranslation?
   BGPPolicyMapping?
   InputFeatures?
   OutputFeatures?
   WCCPRedirectOutbound?
   WCCPRedirectInbound?
   WCCPRedirectExclude?

InterfaceID
  	= a:InterfaceType b:InterfaceNumber c:ChannelNumber? d:SubinterfaceNumber? 

InterfaceType
  = 'Vlan' 
  / 'Ethernet' 
  / 'FastEthernet' 
  / 'GigabitEthernet' 
  / 'TenGigabitEthernet' 
  / 'Port-channel' 
  / 'Loopback' 
  / 'Tunnel' 
  / 'Async' 
  / 'NVI' 
  / 'ucse' 
  / 'Embedded-Service-Engine' 
  / 'BRI' 
  / 'Null'

InterfaceNumber
	= a:Number '/' b:Number '/' c:Number '/' d:Number 
	/ a:Number '/' b:Number '/' c:Number 
	/ a:Number '/' b:Number 
	/ a:Number 
  	
SubinterfaceNumber
  = '.' i:Number

ChannelNumber
  = ':' i:Number
 
LineStatus
  = InterfaceState Comma WS?
  
ProtocolStatus
  = 'line protocol is' WS? InterfaceState WS?

InterfaceState
  	= 'up' (WS? '(connected)')?
  	/ 'down' (WS? '(notconnect)')?
  	/ 'administratively down'

InternetProtocolParsing<EEnabledState>
  = 'Internet protocol processing' WS? es:EnabledState WS? { es }
  
InternetAddress
  = 'Internet address is' WS? Prefix
  
Prefix
 = IPAddress '/' Number WS?

IPAddress<System.Net.IPAddress>
 = ip:(Octet '.' Octet '.' Octet '.' Octet) WS? { System.Net.IPAddress.Parse(ip) }
 
Octet
 = '25' [0-5]
 / '2' [0-4][0-9]
 / [0-1][0-9][0-9]
 / [0-9][0-9]?

InternetAddressUnnumbered
 = 'Interface is unnumbered. Using address of' WS? InterfaceID WS? '(' IPAddress ')' WS?

BroadcastAddress
  = 'Broadcast address is' WS? IPAddress WS?
  
EnabledState<EEnabledState>
  = 'enabled' { EEnabledState.Enabled }
  / 'disabled' { EEnabledState.Disabled }
 
AddressDeterminedBy
  = 'Address determined by' WS? AddressAssignmentMethod WS?
  
AddressAssignmentMethod
  = 'non-volatile memory'
  / 'DHCP'
  / 'setup command'
 
MTU
  = 'MTU is' WS? Number WS? 'bytes' WS?
  
HelperAddress
  = 'Helper address is' WS? IPAddress? ('not set')? WS?
  
DirectedBroadcastForwarding<EEnabledState>
  = 'Directed broadcast forwarding is' WS? es:EnabledState WS? { es }
 
MulticastReservedGroupsJoined
  = 'Multicast reserved groups joined:' WS? IPAddress* WS?
  
OutgoingAccessList
 = 'Outgoing access list is' WS? 'not set'? AccessListName? WS?
 
InboundAccessList
 = 'Inbound' WS? 'access list is' WS? 'not set'? AccessListName? WS?
 
AccessListName
 = [A-Za-z0-9]+
 
ProxyARP<EEnabledState>
 = 'Proxy ARP is' WS? es:EnabledState WS? { es }
 
LocalProxyARP<EEnabledState>
 = 'Local Proxy ARP is' WS? es:EnabledState WS? { es }
 
SecurityLevel
 = 'Security level is' WS? SecurityLevelSetting WS?
 
SecurityLevelSetting
 = 'default'
 
SplitHorizon<EEnabledState>
 = 'Split horizon is' WS? es:EnabledState WS? { es }
 
ICMPRedirects
 = 'ICMP redirects are' WS? SentWhen WS?
 
ICMPUnreachables
 = 'ICMP unreachables are' WS? SentWhen WS?
 
ICMPMaskReplies
 = 'ICMP mask replies are' WS? SentWhen WS?
 
SentWhen
 = 'always sent'
 / 'never sent'
 
IPFastSwitching<EEnabledState>
 = 'IP fast switching is' WS? es:EnabledState WS? { es }
 
IPFastSwitchingOnSameInterface<EEnabledState>
 = 'IP fast switching on the same interface is' WS? es:EnabledState WS? { es }
 
IPFlowSwitching<EEnabledState>
 = 'IP Flow switching is' WS? es:EnabledState WS? { es }
 
IPCEFSwitching<EEnabledState>
 = 'IP CEF switching is' WS? es:EnabledState WS? { es }

IPCEFSwitchingTurboVector
 = 'IP CEF switching turbo vector' WS?
 
IPNullTurboVector
 = 'IP Null turbo vector' WS?
 
IPMulticastFastSwitching<EEnabledState>
 = 'IP multicast fast switching is' WS? es:EnabledState WS? { es }
 
IPMulticastDistributedFastSwitching<EEnabledState>
 = 'IP multicast distributed fast switching is' WS? es:EnabledState WS? { es }
 
IPRouteCacheFlags
 = 'IP route-cache flags are' WS? IPRouteCacheFlag* WS?
 
IPRouteCacheFlag
 = 'Fast' Comma? WS?
 / 'CEF' Comma? WS?
 
RouterDiscovery<EEnabledState>
 = 'Router Discovery is' WS? es:EnabledState WS? { es }
 
IPOutputPacketAccounting<EEnabledState>
 = 'IP output packet accounting is' WS? es:EnabledState WS? { es }
 
IPAccessViolationAccounting<EEnabledState>
 = 'IP access violation accounting is' WS? es:EnabledState WS? { es }
 
TCPIPHeaderCompression<EEnabledState>
 = 'TCP/IP header compression is' WS? es:EnabledState WS? { es }
 
RTPIPHeaderCompression<EEnabledState>
 = 'RTP/IP header compression is' WS? es:EnabledState WS? { es }
 
ProbeProxyNames<EEnabledState>
 = 'Probe proxy name replies are' WS? es:EnabledState WS? { es }
 
PolicyRouting<EEnabledState>
 = 'Policy routing is' WS? es:EnabledState WS? { es }
 
NetworkAddressTranslation<EEnabledState>
 = 'Network address translation is' WS? es:EnabledState WS? { es }
 
BGPPolicyMapping<EEnabledState>
 = 'BGP Policy Mapping is' WS? es:EnabledState WS? { es }
 
InputFeatures
 = 'Input features:' WS? InputFeature* WS?
 
InputFeature
 = 'MCI Check' Comma? WS?
 / 'Common Flow Table' Comma? WS?
 / 'Stateful Inspection' Comma? WS?

OutputFeatures
 = 'Output features:' WS? OutputFeature* WS?

OutputFeature
 = 'Input interface drop' Comma? WS?
 / 'Check hwidb' Comma? WS?
 / 'Post-routing NAT NVI Output' Comma? WS?
 / 'Common Flow Table' Comma? WS?
 / 'Stateful Inspection' Comma? WS?
 / 'CCE Post NAT Classification' Comma? WS?
 / 'Firewall (firewall component)' Comma? WS?

WCCPRedirectOutbound<EEnabledState>
 = ('IPv4' WS?)? 'WCCP Redirect outbound is' WS? es:EnabledState WS? { es }

WCCPRedirectInbound<EEnabledState>
 = ('IPv4' WS?)? 'WCCP Redirect inbound is' WS? es:EnabledState WS? { es }

WCCPRedirectExclude<EEnabledState>
 = ('IPv4' WS?)? 'WCCP Redirect exclude is' WS? es:EnabledState WS? { es }
 
WS
  = [ \t\r\n]+

Number
  = i:[0-9]+ { string.Concat(i) }
 
BigNumber<Int64>
  = i:[0-9]+ { Convert.ToInt64(string.Concat(i)) }

Comma
  = ','

CiscoPrompt
  = [A-Za-z0-9-_]*[#>]

EOF 
  = !.
