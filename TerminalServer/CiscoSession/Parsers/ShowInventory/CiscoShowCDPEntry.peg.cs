// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.2.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "CiscoShowCDPEntry.peg"
           TerminalServer.CiscoSession.Parsers
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "CiscoShowCDPEntry.peg"
       TerminalServer.CiscoSession.Model
        #line default
        ;
    using
        #line 4 "CiscoShowCDPEntry.peg"
       System.Net
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="CiscoShowCDPEntry" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.2.0")]
    public
    partial class
    #line 2 "CiscoShowCDPEntry.peg"
           CiscoShowCDPEntry
    #line default
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="CiscoShowCDPEntry" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="List&lt;ShowCDPEntryItem&gt;" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public List<ShowCDPEntryItem> Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.CDPEntries(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse 'CDPEntries'.");
            }
            return result.Value;
        }

        private IParseResult<
            #line 10 "CiscoShowCDPEntry.peg"
           List<ShowCDPEntryItem>
            #line default
            > CDPEntries(ref Cursor cursor)
        {
            IParseResult<List<ShowCDPEntryItem>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.CLICommand(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<IList<ShowCDPEntryItem>> r4 = null;
                    var itemsStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<ShowCDPEntryItem>();
                    while (true)
                    {
                        IParseResult<ShowCDPEntryItem> r5 = null;
                        r5 = this.CDPEntry(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<ShowCDPEntryItem>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var itemsEnd = cursor;
                    var items = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.CiscoPrompt(ref cursor);
                        if (r6 != null)
                        {
                            IParseResult<IList<IList<string>>> r7 = null;
                            var startCursor3 = cursor;
                            var l2 = new List<IList<string>>();
                            while (l2.Count < 1)
                            {
                                IParseResult<IList<string>> r8 = null;
                                r8 = this.WS(ref cursor);
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r7 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            if (r7 != null)
                            {
                                IParseResult<string> r9 = null;
                                r9 = this.EOF(ref cursor);
                                if (r9 != null)
                                {
                                    r0 = this.ReturnHelper<List<ShowCDPEntryItem>>(startCursor0, ref cursor, state =>
                                        #line 11 "CiscoShowCDPEntry.peg"
                                                         new List<ShowCDPEntryItem>(items)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> CLICommand(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.Line(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseLiteral(ref cursor, "show cdp entry *");
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> Line(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "nn", negated: true);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseClass(ref cursor, "\n\n");
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 19 "CiscoShowCDPEntry.peg"
         ShowCDPEntryItem
            #line default
            > CDPEntry(ref Cursor cursor)
        {
            IParseResult<ShowCDPEntryItem> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.EntryStart(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var deviceIdStart = cursor;
                r2 = this.DeviceID(ref cursor);
                var deviceIdEnd = cursor;
                var deviceId = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<System.Net.IPAddress>> r3 = null;
                    var entryAddressesStart = cursor;
                    r3 = this.EntryAddresses(ref cursor);
                    var entryAddressesEnd = cursor;
                    var entryAddresses = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        var platformStart = cursor;
                        r4 = this.Platform(ref cursor);
                        var platformEnd = cursor;
                        var platform = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.Comma(ref cursor);
                            if (r5 != null)
                            {
                                IParseResult<IList<IList<string>>> r6 = null;
                                var startCursor1 = cursor;
                                var l0 = new List<IList<string>>();
                                while (l0.Count < 1)
                                {
                                    IParseResult<IList<string>> r7 = null;
                                    r7 = this.WS(ref cursor);
                                    if (r7 != null)
                                    {
                                        l0.Add(r7.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r6 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                                if (r6 != null)
                                {
                                    IParseResult<IList<ECDPCapability>> r8 = null;
                                    var capabilitiesStart = cursor;
                                    r8 = this.Capabilities(ref cursor);
                                    var capabilitiesEnd = cursor;
                                    var capabilities = ValueOrDefault(r8);
                                    if (r8 != null)
                                    {
                                        IParseResult<string> r9 = null;
                                        var intfStart = cursor;
                                        r9 = this.Interface(ref cursor);
                                        var intfEnd = cursor;
                                        var intf = ValueOrDefault(r9);
                                        if (r9 != null)
                                        {
                                            IParseResult<string> r10 = null;
                                            r10 = this.Comma(ref cursor);
                                            if (r10 != null)
                                            {
                                                IParseResult<IList<IList<string>>> r11 = null;
                                                var startCursor2 = cursor;
                                                var l1 = new List<IList<string>>();
                                                while (l1.Count < 1)
                                                {
                                                    IParseResult<IList<string>> r12 = null;
                                                    r12 = this.WS(ref cursor);
                                                    if (r12 != null)
                                                    {
                                                        l1.Add(r12.Value);
                                                    }
                                                    else
                                                    {
                                                        break;
                                                    }
                                                }
                                                r11 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                                                if (r11 != null)
                                                {
                                                    IParseResult<string> r13 = null;
                                                    var portIdStart = cursor;
                                                    r13 = this.PortID(ref cursor);
                                                    var portIdEnd = cursor;
                                                    var portId = ValueOrDefault(r13);
                                                    if (r13 != null)
                                                    {
                                                        IParseResult<int> r14 = null;
                                                        var holdTimeStart = cursor;
                                                        r14 = this.HoldTime(ref cursor);
                                                        var holdTimeEnd = cursor;
                                                        var holdTime = ValueOrDefault(r14);
                                                        if (r14 != null)
                                                        {
                                                            IParseResult<string> r15 = null;
                                                            var versionStart = cursor;
                                                            r15 = this.Version(ref cursor);
                                                            var versionEnd = cursor;
                                                            var version = ValueOrDefault(r15);
                                                            if (r15 != null)
                                                            {
                                                                IParseResult<int> r16 = null;
                                                                var advVersionStart = cursor;
                                                                r16 = this.AdvertisementVersion(ref cursor);
                                                                var advVersionEnd = cursor;
                                                                var advVersion = ValueOrDefault(r16);
                                                                if (r16 != null)
                                                                {
                                                                    IParseResult<IList<CDPExtra>> r17 = null;
                                                                    var extrasStart = cursor;
                                                                    var startCursor3 = cursor;
                                                                    var l2 = new List<CDPExtra>();
                                                                    while (true)
                                                                    {
                                                                        IParseResult<CDPExtra> r18 = null;
                                                                        r18 = this.AdvertisementExtra(ref cursor);
                                                                        if (r18 != null)
                                                                        {
                                                                            l2.Add(r18.Value);
                                                                        }
                                                                        else
                                                                        {
                                                                            break;
                                                                        }
                                                                    }
                                                                    r17 = this.ReturnHelper<IList<CDPExtra>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                                                    var extrasEnd = cursor;
                                                                    var extras = ValueOrDefault(r17);
                                                                    if (r17 != null)
                                                                    {
                                                                        r0 = this.ReturnHelper<ShowCDPEntryItem>(startCursor0, ref cursor, state =>
                                                                            #line 28 "CiscoShowCDPEntry.peg"
                                
    new ShowCDPEntryItem {
        DeviceID = deviceId,
        EntryAddresses = new List<System.Net.IPAddress>(entryAddresses),
        Platform = platform,
        Capabilities = new List<ECDPCapability>(capabilities),
        Interface = intf,
        PortId = portId,
        HoldTime = holdTime,
        VersionText = version,
        AdvertisementVersion = advVersion,
        AdvertisementExtras = new List<CDPExtra>(extras)
    }
                                                                            #line default
                                                                            );
                                                                    }
                                                                    else
                                                                    {
                                                                        cursor = startCursor0;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    cursor = startCursor0;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                cursor = startCursor0;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            cursor = startCursor0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EntryStart(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "--");
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l1 = new List<string>();
                while (l1.Count < 1)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseClass(ref cursor, "\r\r");
                    if (r4 != null)
                    {
                        l1.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                if (r3 != null)
                {
                    IParseResult<string> r5 = null;
                    r5 = this.ParseClass(ref cursor, "\n\n");
                    if (r5 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> DeviceID(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Device ID:");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var dnStart = cursor;
                    r4 = this.DeviceName(ref cursor);
                    var dnEnd = cursor;
                    var dn = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 47 "CiscoShowCDPEntry.peg"
                                        dn
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> DeviceName(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ToEndOfLine(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 52 "CiscoShowCDPEntry.peg"
               IList<System.Net.IPAddress>
            #line default
            > EntryAddresses(ref Cursor cursor)
        {
            IParseResult<IList<System.Net.IPAddress>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Entry address(es):");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.WS(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IList<System.Net.IPAddress>> r3 = null;
                    var ipsStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<System.Net.IPAddress>();
                    while (true)
                    {
                        IParseResult<System.Net.IPAddress> r4 = null;
                        r4 = this.EntryIPAddress(ref cursor);
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r3 = this.ReturnHelper<IList<System.Net.IPAddress>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    var ipsEnd = cursor;
                    var ips = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<IList<System.Net.IPAddress>>(startCursor0, ref cursor, state =>
                            #line 53 "CiscoShowCDPEntry.peg"
                                                   ips
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 55 "CiscoShowCDPEntry.peg"
               System.Net.IPAddress
            #line default
            > EntryIPAddress(ref Cursor cursor)
        {
            IParseResult<System.Net.IPAddress> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "IP address:");
                if (r1 != null)
                {
                    IParseResult<IList<IList<string>>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<IList<string>>();
                    while (l0.Count < 1)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this.WS(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        IParseResult<System.Net.IPAddress> r4 = null;
                        var ipStart = cursor;
                        r4 = this.IPAddress(ref cursor);
                        var ipEnd = cursor;
                        var ip = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<IList<IList<string>>> r5 = null;
                            var startCursor2 = cursor;
                            var l1 = new List<IList<string>>();
                            while (l1.Count < 1)
                            {
                                IParseResult<IList<string>> r6 = null;
                                r6 = this.WS(ref cursor);
                                if (r6 != null)
                                {
                                    l1.Add(r6.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<System.Net.IPAddress>(startCursor0, ref cursor, state =>
                                    #line 56 "CiscoShowCDPEntry.peg"
                                        ip
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r7 = null;
                r7 = this.ParseLiteral(ref cursor, "IPv6 address:");
                if (r7 != null)
                {
                    IParseResult<IList<IList<string>>> r8 = null;
                    var startCursor4 = cursor;
                    var l2 = new List<IList<string>>();
                    while (l2.Count < 1)
                    {
                        IParseResult<IList<string>> r9 = null;
                        r9 = this.WS(ref cursor);
                        if (r9 != null)
                        {
                            l2.Add(r9.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r8 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                    if (r8 != null)
                    {
                        IParseResult<System.Net.IPAddress> r10 = null;
                        var ipStart = cursor;
                        r10 = this.IPv6Address(ref cursor);
                        var ipEnd = cursor;
                        var ip = ValueOrDefault(r10);
                        if (r10 != null)
                        {
                            IParseResult<IList<IList<string>>> r11 = null;
                            var startCursor5 = cursor;
                            var l3 = new List<IList<string>>();
                            while (l3.Count < 1)
                            {
                                IParseResult<IList<string>> r12 = null;
                                r12 = this.WS(ref cursor);
                                if (r12 != null)
                                {
                                    l3.Add(r12.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r11 = this.ReturnHelper<IList<IList<string>>>(startCursor5, ref cursor, state => l3.AsReadOnly());
                            if (r11 != null)
                            {
                                r0 = this.ReturnHelper<System.Net.IPAddress>(startCursor3, ref cursor, state =>
                                    #line 57 "CiscoShowCDPEntry.peg"
                                            ip
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 59 "CiscoShowCDPEntry.peg"
          System.Net.IPAddress
            #line default
            > IPAddress(ref Cursor cursor)
        {
            IParseResult<System.Net.IPAddress> r0 = null;
            var startCursor0 = cursor;
            IParseResult<int> r1 = null;
            var aStart = cursor;
            r1 = this.Octet(ref cursor);
            var aEnd = cursor;
            var a = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, ".");
                if (r2 != null)
                {
                    IParseResult<int> r3 = null;
                    var bStart = cursor;
                    r3 = this.Octet(ref cursor);
                    var bEnd = cursor;
                    var b = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, ".");
                        if (r4 != null)
                        {
                            IParseResult<int> r5 = null;
                            var cStart = cursor;
                            r5 = this.Octet(ref cursor);
                            var cEnd = cursor;
                            var c = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                IParseResult<string> r6 = null;
                                r6 = this.ParseLiteral(ref cursor, ".");
                                if (r6 != null)
                                {
                                    IParseResult<int> r7 = null;
                                    var dStart = cursor;
                                    r7 = this.Octet(ref cursor);
                                    var dEnd = cursor;
                                    var d = ValueOrDefault(r7);
                                    if (r7 != null)
                                    {
                                        r0 = this.ReturnHelper<System.Net.IPAddress>(startCursor0, ref cursor, state =>
                                            #line 60 "CiscoShowCDPEntry.peg"
                                                 new System.Net.IPAddress(new byte[] { Convert.ToByte(a), Convert.ToByte(b), Convert.ToByte(c), Convert.ToByte(d) })
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 62 "CiscoShowCDPEntry.peg"
      int
            #line default
            > Octet(ref Cursor cursor)
        {
            IParseResult<int> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var iStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "09");
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var iEnd = cursor;
            var i = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<int>(startCursor0, ref cursor, state =>
                    #line 63 "CiscoShowCDPEntry.peg"
              Convert.ToInt32(string.Concat(i))
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 65 "CiscoShowCDPEntry.peg"
            System.Net.IPAddress
            #line default
            > IPv6Address(ref Cursor cursor)
        {
            IParseResult<System.Net.IPAddress> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var ipStart = cursor;
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                r2 = this.IPv6AddressPart(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "::");
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.IPv6AddressPart(ref cursor);
                        if (r4 != null)
                        {
                            {
                                var len = cursor.Location - startCursor1.Location;
                                r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                    state.Subject.Substring(startCursor1.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                var ipEnd = cursor;
                var ip = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    var startCursor2 = cursor;
                    var l0 = new List<string>();
                    while (l0.Count < 1)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.IPv6AddressScope(ref cursor);
                        if (r6 != null)
                        {
                            l0.Add(r6.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r5 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                    if (r5 != null)
                    {
                        r0 = this.ReturnHelper<System.Net.IPAddress>(startCursor0, ref cursor, state =>
                            #line 66 "CiscoShowCDPEntry.peg"
                                                                 System.Net.IPAddress.Parse(ip)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r7 = null;
                var ipStart = cursor;
                r7 = this.IPv6AddressPart(ref cursor);
                var ipEnd = cursor;
                var ip = ValueOrDefault(r7);
                if (r7 != null)
                {
                    IParseResult<IList<string>> r8 = null;
                    var startCursor4 = cursor;
                    var l1 = new List<string>();
                    while (l1.Count < 1)
                    {
                        IParseResult<string> r9 = null;
                        r9 = this.IPv6AddressScope(ref cursor);
                        if (r9 != null)
                        {
                            l1.Add(r9.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r8 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                    if (r8 != null)
                    {
                        r0 = this.ReturnHelper<System.Net.IPAddress>(startCursor3, ref cursor, state =>
                            #line 67 "CiscoShowCDPEntry.peg"
                                          System.Net.IPAddress.Parse(ip)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<string> IPv6AddressPart(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.Hextet(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<string>> r5 = null;
                        r5 = this.Hextet(ref cursor);
                        if (r5 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<string>> Hextet(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "09afAF");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> IPv6AddressScope(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<IList<string>>> r1 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this.WS(ref cursor);
                    if (r2 != null)
                    {
                        l0.Add(r2.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r1 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r1 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "(global unicast)");
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<IList<IList<string>>> r4 = null;
                var startCursor3 = cursor;
                var l1 = new List<IList<string>>();
                while (l1.Count < 1)
                {
                    IParseResult<IList<string>> r5 = null;
                    r5 = this.WS(ref cursor);
                    if (r5 != null)
                    {
                        l1.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r4 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                if (r4 != null)
                {
                    IParseResult<string> r6 = null;
                    r6 = this.ParseLiteral(ref cursor, "(link-local)");
                    if (r6 != null)
                    {
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r0 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                state.Subject.Substring(startCursor2.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> Platform(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Platform:");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<IList<string>> r4 = null;
                    var startCursor2 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseClass(ref cursor, ",,", negated: true);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 1)
                    {
                        r4 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r6 = null;
                        var startCursor3 = cursor;
                        var l2 = new List<IList<string>>();
                        while (l2.Count < 1)
                        {
                            IParseResult<IList<string>> r7 = null;
                            r7 = this.WS(ref cursor);
                            if (r7 != null)
                            {
                                l2.Add(r7.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r6 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                    state.Subject.Substring(startCursor0.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 82 "CiscoShowCDPEntry.peg"
              IList<ECDPCapability>
            #line default
            > Capabilities(ref Cursor cursor)
        {
            IParseResult<IList<ECDPCapability>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Capabilities:");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<IList<ECDPCapability>> r4 = null;
                    var capsStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<ECDPCapability>();
                    while (true)
                    {
                        IParseResult<ECDPCapability> r5 = null;
                        r5 = this.Capability(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<ECDPCapability>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var capsEnd = cursor;
                    var caps = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<IList<ECDPCapability>>(startCursor0, ref cursor, state =>
                            #line 83 "CiscoShowCDPEntry.peg"
                                            caps
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 85 "CiscoShowCDPEntry.peg"
            ECDPCapability
            #line default
            > Capability(ref Cursor cursor)
        {
            IParseResult<ECDPCapability> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "Router");
                if (r1 != null)
                {
                    IParseResult<IList<IList<string>>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<IList<string>>();
                    while (l0.Count < 1)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this.WS(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor0, ref cursor, state =>
                            #line 86 "CiscoShowCDPEntry.peg"
                  ECDPCapability.Router
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "Switch");
                if (r4 != null)
                {
                    IParseResult<IList<IList<string>>> r5 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<IList<string>>();
                    while (l1.Count < 1)
                    {
                        IParseResult<IList<string>> r6 = null;
                        r6 = this.WS(ref cursor);
                        if (r6 != null)
                        {
                            l1.Add(r6.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r5 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r5 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor2, ref cursor, state =>
                            #line 87 "CiscoShowCDPEntry.peg"
                  ECDPCapability.Switch
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                IParseResult<string> r7 = null;
                r7 = this.ParseLiteral(ref cursor, "Source-Route-Bridge");
                if (r7 != null)
                {
                    IParseResult<IList<IList<string>>> r8 = null;
                    var startCursor5 = cursor;
                    var l2 = new List<IList<string>>();
                    while (l2.Count < 1)
                    {
                        IParseResult<IList<string>> r9 = null;
                        r9 = this.WS(ref cursor);
                        if (r9 != null)
                        {
                            l2.Add(r9.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r8 = this.ReturnHelper<IList<IList<string>>>(startCursor5, ref cursor, state => l2.AsReadOnly());
                    if (r8 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor4, ref cursor, state =>
                            #line 88 "CiscoShowCDPEntry.peg"
                               ECDPCapability.SourceRouteBridge
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            if (r0 == null)
            {
                var startCursor6 = cursor;
                IParseResult<string> r10 = null;
                r10 = this.ParseLiteral(ref cursor, "IGMP");
                if (r10 != null)
                {
                    IParseResult<IList<IList<string>>> r11 = null;
                    var startCursor7 = cursor;
                    var l3 = new List<IList<string>>();
                    while (l3.Count < 1)
                    {
                        IParseResult<IList<string>> r12 = null;
                        r12 = this.WS(ref cursor);
                        if (r12 != null)
                        {
                            l3.Add(r12.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r11 = this.ReturnHelper<IList<IList<string>>>(startCursor7, ref cursor, state => l3.AsReadOnly());
                    if (r11 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor6, ref cursor, state =>
                            #line 89 "CiscoShowCDPEntry.peg"
                ECDPCapability.IGMP
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor6;
                    }
                }
                else
                {
                    cursor = startCursor6;
                }
            }
            if (r0 == null)
            {
                var startCursor8 = cursor;
                IParseResult<string> r13 = null;
                r13 = this.ParseLiteral(ref cursor, "Trans-Bridge");
                if (r13 != null)
                {
                    IParseResult<IList<IList<string>>> r14 = null;
                    var startCursor9 = cursor;
                    var l4 = new List<IList<string>>();
                    while (l4.Count < 1)
                    {
                        IParseResult<IList<string>> r15 = null;
                        r15 = this.WS(ref cursor);
                        if (r15 != null)
                        {
                            l4.Add(r15.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r14 = this.ReturnHelper<IList<IList<string>>>(startCursor9, ref cursor, state => l4.AsReadOnly());
                    if (r14 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor8, ref cursor, state =>
                            #line 90 "CiscoShowCDPEntry.peg"
                        ECDPCapability.TransBridge
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor8;
                    }
                }
                else
                {
                    cursor = startCursor8;
                }
            }
            if (r0 == null)
            {
                var startCursor10 = cursor;
                IParseResult<string> r16 = null;
                r16 = this.ParseLiteral(ref cursor, "CVTA");
                if (r16 != null)
                {
                    IParseResult<IList<IList<string>>> r17 = null;
                    var startCursor11 = cursor;
                    var l5 = new List<IList<string>>();
                    while (l5.Count < 1)
                    {
                        IParseResult<IList<string>> r18 = null;
                        r18 = this.WS(ref cursor);
                        if (r18 != null)
                        {
                            l5.Add(r18.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r17 = this.ReturnHelper<IList<IList<string>>>(startCursor11, ref cursor, state => l5.AsReadOnly());
                    if (r17 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor10, ref cursor, state =>
                            #line 91 "CiscoShowCDPEntry.peg"
                ECDPCapability.CVTA
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor10;
                    }
                }
                else
                {
                    cursor = startCursor10;
                }
            }
            if (r0 == null)
            {
                var startCursor12 = cursor;
                IParseResult<string> r19 = null;
                r19 = this.ParseLiteral(ref cursor, "phone");
                if (r19 != null)
                {
                    IParseResult<IList<IList<string>>> r20 = null;
                    var startCursor13 = cursor;
                    var l6 = new List<IList<string>>();
                    while (l6.Count < 1)
                    {
                        IParseResult<IList<string>> r21 = null;
                        r21 = this.WS(ref cursor);
                        if (r21 != null)
                        {
                            l6.Add(r21.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r20 = this.ReturnHelper<IList<IList<string>>>(startCursor13, ref cursor, state => l6.AsReadOnly());
                    if (r20 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor12, ref cursor, state =>
                            #line 92 "CiscoShowCDPEntry.peg"
                 ECDPCapability.Phone
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor12;
                    }
                }
                else
                {
                    cursor = startCursor12;
                }
            }
            if (r0 == null)
            {
                var startCursor14 = cursor;
                IParseResult<string> r22 = null;
                r22 = this.ParseLiteral(ref cursor, "port");
                if (r22 != null)
                {
                    IParseResult<IList<IList<string>>> r23 = null;
                    var startCursor15 = cursor;
                    var l7 = new List<IList<string>>();
                    while (l7.Count < 1)
                    {
                        IParseResult<IList<string>> r24 = null;
                        r24 = this.WS(ref cursor);
                        if (r24 != null)
                        {
                            l7.Add(r24.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r23 = this.ReturnHelper<IList<IList<string>>>(startCursor15, ref cursor, state => l7.AsReadOnly());
                    if (r23 != null)
                    {
                        r0 = this.ReturnHelper<ECDPCapability>(startCursor14, ref cursor, state =>
                            #line 93 "CiscoShowCDPEntry.peg"
                ECDPCapability.Port
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor14;
                    }
                }
                else
                {
                    cursor = startCursor14;
                }
            }
            return r0;
        }

        private IParseResult<string> Interface(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Interface:");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var intfStart = cursor;
                    var startCursor2 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseClass(ref cursor, "AZaz");
                    if (r5 != null)
                    {
                        IParseResult<IList<string>> r6 = null;
                        var startCursor3 = cursor;
                        var l1 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ParseClass(ref cursor, "AZaz09//");
                            if (r7 != null)
                            {
                                l1.Add(r7.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l1.Count >= 1)
                        {
                            r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r4 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var intfEnd = cursor;
                    var intf = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r8 = null;
                        var startCursor4 = cursor;
                        var l2 = new List<IList<string>>();
                        while (l2.Count < 1)
                        {
                            IParseResult<IList<string>> r9 = null;
                            r9 = this.WS(ref cursor);
                            if (r9 != null)
                            {
                                l2.Add(r9.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r8 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                        if (r8 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 97 "CiscoShowCDPEntry.peg"
                                                       intf
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PortID(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Port ID (outgoing port):");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var portIdStart = cursor;
                    var startCursor2 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseClass(ref cursor, "AZaz");
                    if (r5 != null)
                    {
                        IParseResult<IList<string>> r6 = null;
                        var startCursor3 = cursor;
                        var l1 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ParseClass(ref cursor, "AZaz09//");
                            if (r7 != null)
                            {
                                l1.Add(r7.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l1.Count >= 1)
                        {
                            r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r4 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var portIdEnd = cursor;
                    var portId = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r8 = null;
                        var startCursor4 = cursor;
                        var l2 = new List<IList<string>>();
                        while (l2.Count < 1)
                        {
                            IParseResult<IList<string>> r9 = null;
                            r9 = this.WS(ref cursor);
                            if (r9 != null)
                            {
                                l2.Add(r9.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r8 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                        if (r8 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 100 "CiscoShowCDPEntry.peg"
                                                                       portId
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 103 "CiscoShowCDPEntry.peg"
         int
            #line default
            > HoldTime(ref Cursor cursor)
        {
            IParseResult<int> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Holdtime");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<int> r7 = null;
                            var secondsStart = cursor;
                            r7 = this.Number(ref cursor);
                            var secondsEnd = cursor;
                            var seconds = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this.WS(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r8 != null)
                                {
                                    IParseResult<string> r10 = null;
                                    r10 = this.ParseLiteral(ref cursor, "sec");
                                    if (r10 != null)
                                    {
                                        IParseResult<IList<IList<string>>> r11 = null;
                                        var startCursor4 = cursor;
                                        var l3 = new List<IList<string>>();
                                        while (l3.Count < 1)
                                        {
                                            IParseResult<IList<string>> r12 = null;
                                            r12 = this.WS(ref cursor);
                                            if (r12 != null)
                                            {
                                                l3.Add(r12.Value);
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        r11 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                        if (r11 != null)
                                        {
                                            r0 = this.ReturnHelper<int>(startCursor0, ref cursor, state =>
                                                #line 104 "CiscoShowCDPEntry.peg"
                                                         seconds
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> Version(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Version");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ToEndOfLine(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.NoBlankLines(ref cursor);
                            if (r6 != null)
                            {
                                IParseResult<IList<IList<string>>> r7 = null;
                                var startCursor2 = cursor;
                                var l1 = new List<IList<string>>();
                                while (l1.Count < 1)
                                {
                                    IParseResult<IList<string>> r8 = null;
                                    r8 = this.WS(ref cursor);
                                    if (r8 != null)
                                    {
                                        l1.Add(r8.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r7 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                                if (r7 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor0.Location;
                                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                            state.Subject.Substring(startCursor0.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<string>> NoBlankLines(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                var startCursor1 = cursor;
                IParseResult<IList<string>> r2 = null;
                var startCursor2 = cursor;
                var l1 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseClass(ref cursor, "\r\r\n\n", negated: true);
                    if (r3 != null)
                    {
                        l1.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l1.Count >= 1)
                {
                    r2 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r2 != null)
                {
                    IParseResult<IList<string>> r4 = null;
                    var startCursor3 = cursor;
                    var l2 = new List<string>();
                    while (l2.Count < 1)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseClass(ref cursor, "\r\r");
                        if (r5 != null)
                        {
                            l2.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseClass(ref cursor, "\n\n");
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor1.Location;
                                r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                    state.Subject.Substring(startCursor1.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<
            #line 112 "CiscoShowCDPEntry.peg"
                     int
            #line default
            > AdvertisementVersion(ref Cursor cursor)
        {
            IParseResult<int> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "advertisement version");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<int> r7 = null;
                            var resStart = cursor;
                            r7 = this.Number(ref cursor);
                            var resEnd = cursor;
                            var res = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this.WS(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r8 != null)
                                {
                                    r0 = this.ReturnHelper<int>(startCursor0, ref cursor, state =>
                                        #line 113 "CiscoShowCDPEntry.peg"
                                                        res
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 115 "CiscoShowCDPEntry.peg"
                   CDPExtra
            #line default
            > AdvertisementExtra(ref Cursor cursor)
        {
            IParseResult<CDPExtra> r0 = null;
            if (r0 == null)
            {
                r0 = this.Duplex(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var textStart = cursor;
                r1 = this.ProtocolHello(ref cursor);
                var textEnd = cursor;
                var text = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<CDPExtra>(startCursor0, ref cursor, state =>
                        #line 117 "CiscoShowCDPEntry.peg"
                        new CDPNotImplementedYet { Name = "protocol hello", Value = text }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.VTPManagementDomain(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.NativeVLAN(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.ManagementAddresses(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var textStart = cursor;
                r2 = this.PowerAvailableTLV(ref cursor);
                var textEnd = cursor;
                var text = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<CDPExtra>(startCursor1, ref cursor, state =>
                        #line 121 "CiscoShowCDPEntry.peg"
                            new CDPNotImplementedYet { Name = "power available", Value = text }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r3 = null;
                var textStart = cursor;
                r3 = this.PowerDrawn(ref cursor);
                var textEnd = cursor;
                var text = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<CDPExtra>(startCursor2, ref cursor, state =>
                        #line 122 "CiscoShowCDPEntry.peg"
                     new CDPNotImplementedYet { Name = "power drawn", Value = text }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r4 = null;
                var textStart = cursor;
                r4 = this.PowerRequestAndPowerManagement(ref cursor);
                var textEnd = cursor;
                var text = ValueOrDefault(r4);
                if (r4 != null)
                {
                    r0 = this.ReturnHelper<CDPExtra>(startCursor3, ref cursor, state =>
                        #line 123 "CiscoShowCDPEntry.peg"
                                         new CDPNotImplementedYet { Name = "power request and management", Value = text }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                IParseResult<string> r5 = null;
                var textStart = cursor;
                r5 = this.PowerRequestLevels(ref cursor);
                var textEnd = cursor;
                var text = ValueOrDefault(r5);
                if (r5 != null)
                {
                    r0 = this.ReturnHelper<CDPExtra>(startCursor4, ref cursor, state =>
                        #line 124 "CiscoShowCDPEntry.peg"
                             new CDPNotImplementedYet { Name = "power request levels", Value = text }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 126 "CiscoShowCDPEntry.peg"
       CDPDuplex
            #line default
            > Duplex(ref Cursor cursor)
        {
            IParseResult<CDPDuplex> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Duplex");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<EDuplex> r7 = null;
                            var duplexStart = cursor;
                            r7 = this.DuplexValue(ref cursor);
                            var duplexEnd = cursor;
                            var duplex = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this.WS(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r8 != null)
                                {
                                    r0 = this.ReturnHelper<CDPDuplex>(startCursor0, ref cursor, state =>
                                        #line 127 "CiscoShowCDPEntry.peg"
                                                
     new CDPDuplex { Duplex = duplex }
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 131 "CiscoShowCDPEntry.peg"
            EDuplex
            #line default
            > DuplexValue(ref Cursor cursor)
        {
            IParseResult<EDuplex> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "full");
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<EDuplex>(startCursor0, ref cursor, state =>
                        #line 132 "CiscoShowCDPEntry.peg"
            EDuplex.Full
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "half");
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<EDuplex>(startCursor1, ref cursor, state =>
                        #line 133 "CiscoShowCDPEntry.peg"
            EDuplex.Half
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> ProtocolHello(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Protocol Hello");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var startCursor3 = cursor;
                            var l2 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.ParseClass(ref cursor, "\r\r\n\n", negated: true);
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l2.Count >= 1)
                            {
                                r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r9 = null;
                                var startCursor4 = cursor;
                                var l3 = new List<IList<string>>();
                                while (l3.Count < 1)
                                {
                                    IParseResult<IList<string>> r10 = null;
                                    r10 = this.WS(ref cursor);
                                    if (r10 != null)
                                    {
                                        l3.Add(r10.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r9 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                if (r9 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor0.Location;
                                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                            state.Subject.Substring(startCursor0.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 138 "CiscoShowCDPEntry.peg"
                    CDPVTPManagementDomain
            #line default
            > VTPManagementDomain(ref Cursor cursor)
        {
            IParseResult<CDPVTPManagementDomain> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "VTP Management Domain");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ParseLiteral(ref cursor, "\'");
                            if (r7 != null)
                            {
                                IParseResult<IList<string>> r8 = null;
                                var vtpStart = cursor;
                                var startCursor3 = cursor;
                                var l2 = new List<string>();
                                while (true)
                                {
                                    IParseResult<string> r9 = null;
                                    r9 = this.ParseClass(ref cursor, "\'\'", negated: true);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                var vtpEnd = cursor;
                                var vtp = ValueOrDefault(r8);
                                if (r8 != null)
                                {
                                    IParseResult<string> r10 = null;
                                    r10 = this.ParseLiteral(ref cursor, "\'");
                                    if (r10 != null)
                                    {
                                        IParseResult<IList<IList<string>>> r11 = null;
                                        var startCursor4 = cursor;
                                        var l3 = new List<IList<string>>();
                                        while (l3.Count < 1)
                                        {
                                            IParseResult<IList<string>> r12 = null;
                                            r12 = this.WS(ref cursor);
                                            if (r12 != null)
                                            {
                                                l3.Add(r12.Value);
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        r11 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                        if (r11 != null)
                                        {
                                            r0 = this.ReturnHelper<CDPVTPManagementDomain>(startCursor0, ref cursor, state =>
                                                #line 139 "CiscoShowCDPEntry.peg"
                                                                  
     new CDPVTPManagementDomain { VTPManagementDomain = string.Concat(vtp) }
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 143 "CiscoShowCDPEntry.peg"
           CDPNativeVLAN
            #line default
            > NativeVLAN(ref Cursor cursor)
        {
            IParseResult<CDPNativeVLAN> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Native VLAN");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<int> r7 = null;
                            var vlanStart = cursor;
                            r7 = this.Number(ref cursor);
                            var vlanEnd = cursor;
                            var vlan = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this.WS(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r8 != null)
                                {
                                    r0 = this.ReturnHelper<CDPNativeVLAN>(startCursor0, ref cursor, state =>
                                        #line 144 "CiscoShowCDPEntry.peg"
                                              
     new CDPNativeVLAN { NativeVLAN = vlan }
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 148 "CiscoShowCDPEntry.peg"
                    CDPManagementIPAddresses
            #line default
            > ManagementAddresses(ref Cursor cursor)
        {
            IParseResult<CDPManagementIPAddresses> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Management address(es)");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<IList<System.Net.IPAddress>> r7 = null;
                            var ipsStart = cursor;
                            var startCursor3 = cursor;
                            var l2 = new List<System.Net.IPAddress>();
                            while (true)
                            {
                                IParseResult<System.Net.IPAddress> r8 = null;
                                r8 = this.EntryIPAddress(ref cursor);
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r7 = this.ReturnHelper<IList<System.Net.IPAddress>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            var ipsEnd = cursor;
                            var ips = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r9 = null;
                                var startCursor4 = cursor;
                                var l3 = new List<IList<string>>();
                                while (l3.Count < 1)
                                {
                                    IParseResult<IList<string>> r10 = null;
                                    r10 = this.WS(ref cursor);
                                    if (r10 != null)
                                    {
                                        l3.Add(r10.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r9 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                if (r9 != null)
                                {
                                    r0 = this.ReturnHelper<CDPManagementIPAddresses>(startCursor0, ref cursor, state =>
                                        #line 149 "CiscoShowCDPEntry.peg"
                                                                    
     new CDPManagementIPAddresses { ManagementIPAddresses = new List<System.Net.IPAddress>(ips) }
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerAvailableTLV(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power Available TLV");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.PowerRequestID(ref cursor);
                            if (r7 != null)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.Comma(ref cursor);
                                if (r8 != null)
                                {
                                    IParseResult<IList<IList<string>>> r9 = null;
                                    var startCursor3 = cursor;
                                    var l2 = new List<IList<string>>();
                                    while (l2.Count < 1)
                                    {
                                        IParseResult<IList<string>> r10 = null;
                                        r10 = this.WS(ref cursor);
                                        if (r10 != null)
                                        {
                                            l2.Add(r10.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r9 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                    if (r9 != null)
                                    {
                                        IParseResult<string> r11 = null;
                                        r11 = this.PowerManagementID(ref cursor);
                                        if (r11 != null)
                                        {
                                            IParseResult<string> r12 = null;
                                            r12 = this.Comma(ref cursor);
                                            if (r12 != null)
                                            {
                                                IParseResult<IList<IList<string>>> r13 = null;
                                                var startCursor4 = cursor;
                                                var l3 = new List<IList<string>>();
                                                while (l3.Count < 1)
                                                {
                                                    IParseResult<IList<string>> r14 = null;
                                                    r14 = this.WS(ref cursor);
                                                    if (r14 != null)
                                                    {
                                                        l3.Add(r14.Value);
                                                    }
                                                    else
                                                    {
                                                        break;
                                                    }
                                                }
                                                r13 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                                if (r13 != null)
                                                {
                                                    IParseResult<string> r15 = null;
                                                    r15 = this.PowerAvailable(ref cursor);
                                                    if (r15 != null)
                                                    {
                                                        IParseResult<string> r16 = null;
                                                        r16 = this.Comma(ref cursor);
                                                        if (r16 != null)
                                                        {
                                                            IParseResult<IList<IList<string>>> r17 = null;
                                                            var startCursor5 = cursor;
                                                            var l4 = new List<IList<string>>();
                                                            while (l4.Count < 1)
                                                            {
                                                                IParseResult<IList<string>> r18 = null;
                                                                r18 = this.WS(ref cursor);
                                                                if (r18 != null)
                                                                {
                                                                    l4.Add(r18.Value);
                                                                }
                                                                else
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                            r17 = this.ReturnHelper<IList<IList<string>>>(startCursor5, ref cursor, state => l4.AsReadOnly());
                                                            if (r17 != null)
                                                            {
                                                                IParseResult<string> r19 = null;
                                                                r19 = this.PowerManagementLevel(ref cursor);
                                                                if (r19 != null)
                                                                {
                                                                    IParseResult<IList<IList<string>>> r20 = null;
                                                                    var startCursor6 = cursor;
                                                                    var l5 = new List<IList<string>>();
                                                                    while (l5.Count < 1)
                                                                    {
                                                                        IParseResult<IList<string>> r21 = null;
                                                                        r21 = this.WS(ref cursor);
                                                                        if (r21 != null)
                                                                        {
                                                                            l5.Add(r21.Value);
                                                                        }
                                                                        else
                                                                        {
                                                                            break;
                                                                        }
                                                                    }
                                                                    r20 = this.ReturnHelper<IList<IList<string>>>(startCursor6, ref cursor, state => l5.AsReadOnly());
                                                                    if (r20 != null)
                                                                    {
                                                                        {
                                                                            var len = cursor.Location - startCursor0.Location;
                                                                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                                                                state.Subject.Substring(startCursor0.Location, len)
                                                                                );
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        cursor = startCursor0;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    cursor = startCursor0;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                cursor = startCursor0;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            cursor = startCursor0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerRequestID(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power request id");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var startCursor3 = cursor;
                            var l2 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.ParseClass(ref cursor, ",,", negated: true);
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l2.Count >= 1)
                            {
                                r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor0.Location;
                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                        state.Subject.Substring(startCursor0.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerManagementID(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power management id");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var startCursor3 = cursor;
                            var l2 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.ParseClass(ref cursor, ",,", negated: true);
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l2.Count >= 1)
                            {
                                r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor0.Location;
                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                        state.Subject.Substring(startCursor0.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerAvailable(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power available");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var startCursor3 = cursor;
                            var l2 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.ParseClass(ref cursor, ",,", negated: true);
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l2.Count >= 1)
                            {
                                r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor0.Location;
                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                        state.Subject.Substring(startCursor0.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerManagementLevel(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power management level");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ToEndOfLine(ref cursor);
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor0.Location;
                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                        state.Subject.Substring(startCursor0.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerDrawn(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power drawn");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ToEndOfLine(ref cursor);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this.WS(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r8 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor0.Location;
                                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                            state.Subject.Substring(startCursor0.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerRequestAndPowerManagement(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.PowerRequestID(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.Comma(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ShortPowerManagementID(ref cursor);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this.WS(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r8 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor0.Location;
                                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                            state.Subject.Substring(startCursor0.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ShortPowerManagementID(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power management id");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ToEndOfLine(ref cursor);
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor0.Location;
                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                        state.Subject.Substring(startCursor0.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> PowerRequestLevels(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Power request levels are");
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var startCursor3 = cursor;
                            var l2 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r8 = null;
                                var startCursor4 = cursor;
                                IParseResult<int> r9 = null;
                                r9 = this.Number(ref cursor);
                                if (r9 != null)
                                {
                                    IParseResult<IList<IList<string>>> r10 = null;
                                    var startCursor5 = cursor;
                                    var l3 = new List<IList<string>>();
                                    while (l3.Count < 1)
                                    {
                                        IParseResult<IList<string>> r11 = null;
                                        r11 = this.WS(ref cursor);
                                        if (r11 != null)
                                        {
                                            l3.Add(r11.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r10 = this.ReturnHelper<IList<IList<string>>>(startCursor5, ref cursor, state => l3.AsReadOnly());
                                    if (r10 != null)
                                    {
                                        {
                                            var len = cursor.Location - startCursor4.Location;
                                            r8 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                                state.Subject.Substring(startCursor4.Location, len)
                                                );
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor4;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor4;
                                }
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor0.Location;
                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                        state.Subject.Substring(startCursor0.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ToEndOfLine(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var textStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "\r\r\n\n", negated: true);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var textEnd = cursor;
            var text = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l1 = new List<string>();
                while (l1.Count < 1)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseClass(ref cursor, "\r\r");
                    if (r4 != null)
                    {
                        l1.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                if (r3 != null)
                {
                    IParseResult<string> r5 = null;
                    r5 = this.ParseClass(ref cursor, "\n\n");
                    if (r5 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 186 "CiscoShowCDPEntry.peg"
                              string.Concat(text)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<string>> WS(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "  \t\t\r\r\n\n");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 195 "CiscoShowCDPEntry.peg"
       int
            #line default
            > Number(ref Cursor cursor)
        {
            IParseResult<int> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var iStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "09");
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var iEnd = cursor;
            var i = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<int>(startCursor0, ref cursor, state =>
                    #line 196 "CiscoShowCDPEntry.peg"
                Convert.ToInt32(string.Concat(i))
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> Comma(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ",");
            return r0;
        }

        private IParseResult<string> CiscoPrompt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseClass(ref cursor, "AZaz");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseClass(ref cursor, "AZaz09--__");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseClass(ref cursor, "##>>");
                    if (r4 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseAny(ref cursor);
            if (r1 == null)
            {
                r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
