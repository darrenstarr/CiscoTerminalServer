// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.2.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "CiscoShowInventory.peg"
           TerminalServer.CiscoSession.Parsers
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "CiscoShowInventory.peg"
       TerminalServer.CiscoSession.Model
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="CiscoShowInventory" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.2.0")]
    public
    partial class
    #line 2 "CiscoShowInventory.peg"
           CiscoShowInventory
    #line default
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="CiscoShowInventory" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="List&lt;ShowInventoryItem&gt;" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public List<ShowInventoryItem> Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.inventory(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse 'inventory'.");
            }
            return result.Value;
        }

        private IParseResult<
            #line 9 "CiscoShowInventory.peg"
          List<ShowInventoryItem>
            #line default
            > inventory(ref Cursor cursor)
        {
            IParseResult<List<ShowInventoryItem>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.CLICommand(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<IList<ShowInventoryItem>> r4 = null;
                    var itemsStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<ShowInventoryItem>();
                    while (true)
                    {
                        IParseResult<ShowInventoryItem> r5 = null;
                        r5 = this.inventoryItem(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<ShowInventoryItem>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var itemsEnd = cursor;
                    var items = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ciscoPrompt(ref cursor);
                        if (r6 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.EOF(ref cursor);
                            if (r7 != null)
                            {
                                r0 = this.ReturnHelper<List<ShowInventoryItem>>(startCursor0, ref cursor, state =>
                                    #line 10 "CiscoShowInventory.peg"
                                                           
		new List<ShowInventoryItem>(items)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> CLICommand(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.Line(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseLiteral(ref cursor, "show inventory");
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> Line(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "nn", negated: true);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseClass(ref cursor, "\n\n");
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 20 "CiscoShowInventory.peg"
              ShowInventoryItem
            #line default
            > inventoryItem(ref Cursor cursor)
        {
            IParseResult<ShowInventoryItem> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var nStart = cursor;
            r1 = this.name(ref cursor);
            var nEnd = cursor;
            var n = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.Comma(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (l1.Count < 1)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this.WS(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            IParseResult<string> r7 = null;
                            var dStart = cursor;
                            r7 = this.description(ref cursor);
                            var dEnd = cursor;
                            var d = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this.WS(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                                if (r8 != null)
                                {
                                    IParseResult<string> r10 = null;
                                    var pStart = cursor;
                                    r10 = this.productId(ref cursor);
                                    var pEnd = cursor;
                                    var p = ValueOrDefault(r10);
                                    if (r10 != null)
                                    {
                                        IParseResult<IList<IList<string>>> r11 = null;
                                        var startCursor4 = cursor;
                                        var l3 = new List<IList<string>>();
                                        while (l3.Count < 1)
                                        {
                                            IParseResult<IList<string>> r12 = null;
                                            r12 = this.WS(ref cursor);
                                            if (r12 != null)
                                            {
                                                l3.Add(r12.Value);
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        r11 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                        if (r11 != null)
                                        {
                                            IParseResult<string> r13 = null;
                                            r13 = this.Comma(ref cursor);
                                            if (r13 != null)
                                            {
                                                IParseResult<IList<IList<string>>> r14 = null;
                                                var startCursor5 = cursor;
                                                var l4 = new List<IList<string>>();
                                                while (l4.Count < 1)
                                                {
                                                    IParseResult<IList<string>> r15 = null;
                                                    r15 = this.WS(ref cursor);
                                                    if (r15 != null)
                                                    {
                                                        l4.Add(r15.Value);
                                                    }
                                                    else
                                                    {
                                                        break;
                                                    }
                                                }
                                                r14 = this.ReturnHelper<IList<IList<string>>>(startCursor5, ref cursor, state => l4.AsReadOnly());
                                                if (r14 != null)
                                                {
                                                    IParseResult<string> r16 = null;
                                                    var vStart = cursor;
                                                    r16 = this.vendorId(ref cursor);
                                                    var vEnd = cursor;
                                                    var v = ValueOrDefault(r16);
                                                    if (r16 != null)
                                                    {
                                                        IParseResult<IList<IList<string>>> r17 = null;
                                                        var startCursor6 = cursor;
                                                        var l5 = new List<IList<string>>();
                                                        while (l5.Count < 1)
                                                        {
                                                            IParseResult<IList<string>> r18 = null;
                                                            r18 = this.WS(ref cursor);
                                                            if (r18 != null)
                                                            {
                                                                l5.Add(r18.Value);
                                                            }
                                                            else
                                                            {
                                                                break;
                                                            }
                                                        }
                                                        r17 = this.ReturnHelper<IList<IList<string>>>(startCursor6, ref cursor, state => l5.AsReadOnly());
                                                        if (r17 != null)
                                                        {
                                                            IParseResult<string> r19 = null;
                                                            r19 = this.Comma(ref cursor);
                                                            if (r19 != null)
                                                            {
                                                                IParseResult<IList<IList<string>>> r20 = null;
                                                                var startCursor7 = cursor;
                                                                var l6 = new List<IList<string>>();
                                                                while (l6.Count < 1)
                                                                {
                                                                    IParseResult<IList<string>> r21 = null;
                                                                    r21 = this.WS(ref cursor);
                                                                    if (r21 != null)
                                                                    {
                                                                        l6.Add(r21.Value);
                                                                    }
                                                                    else
                                                                    {
                                                                        break;
                                                                    }
                                                                }
                                                                r20 = this.ReturnHelper<IList<IList<string>>>(startCursor7, ref cursor, state => l6.AsReadOnly());
                                                                if (r20 != null)
                                                                {
                                                                    IParseResult<string> r22 = null;
                                                                    var sStart = cursor;
                                                                    r22 = this.serialNumber(ref cursor);
                                                                    var sEnd = cursor;
                                                                    var s = ValueOrDefault(r22);
                                                                    if (r22 != null)
                                                                    {
                                                                        IParseResult<IList<IList<string>>> r23 = null;
                                                                        var startCursor8 = cursor;
                                                                        var l7 = new List<IList<string>>();
                                                                        while (l7.Count < 1)
                                                                        {
                                                                            IParseResult<IList<string>> r24 = null;
                                                                            r24 = this.WS(ref cursor);
                                                                            if (r24 != null)
                                                                            {
                                                                                l7.Add(r24.Value);
                                                                            }
                                                                            else
                                                                            {
                                                                                break;
                                                                            }
                                                                        }
                                                                        r23 = this.ReturnHelper<IList<IList<string>>>(startCursor8, ref cursor, state => l7.AsReadOnly());
                                                                        if (r23 != null)
                                                                        {
                                                                            r0 = this.ReturnHelper<ShowInventoryItem>(startCursor0, ref cursor, state =>
                                                                                #line 21 "CiscoShowInventory.peg"
                                                                                                                    
		new ShowInventoryItem {
			Name = n,
			Description = d,
			ProductId = p, 
			VendorId = v,
			SerialNumber = s
		}
                                                                                #line default
                                                                                );
                                                                        }
                                                                        else
                                                                        {
                                                                            cursor = startCursor0;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        cursor = startCursor0;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    cursor = startCursor0;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                cursor = startCursor0;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            cursor = startCursor0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> name(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.Name(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var strStart = cursor;
                    r4 = this.QuotedString(ref cursor);
                    var strEnd = cursor;
                    var str = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 33 "CiscoShowInventory.peg"
                                  str
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> description(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.Descr(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var strStart = cursor;
                    r4 = this.QuotedString(ref cursor);
                    var strEnd = cursor;
                    var str = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 36 "CiscoShowInventory.peg"
                                   str
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> productId(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.PID(ref cursor);
                if (r1 != null)
                {
                    IParseResult<IList<IList<string>>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<IList<string>>();
                    while (l0.Count < 1)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this.WS(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        var strStart = cursor;
                        r4 = this.String(ref cursor);
                        var strEnd = cursor;
                        var str = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 39 "CiscoShowInventory.peg"
                           str
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.PID(ref cursor);
                if (r5 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                        #line 40 "CiscoShowInventory.peg"
            ""
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> vendorId(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.VID(ref cursor);
                if (r1 != null)
                {
                    IParseResult<IList<IList<string>>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<IList<string>>();
                    while (l0.Count < 1)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this.WS(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        var strStart = cursor;
                        r4 = this.String(ref cursor);
                        var strEnd = cursor;
                        var str = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 43 "CiscoShowInventory.peg"
                           str
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.VID(ref cursor);
                if (r5 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                        #line 44 "CiscoShowInventory.peg"
         ""
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> serialNumber(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.SN(ref cursor);
                if (r1 != null)
                {
                    IParseResult<IList<IList<string>>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<IList<string>>();
                    while (l0.Count < 1)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this.WS(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        var strStart = cursor;
                        r4 = this.String(ref cursor);
                        var strEnd = cursor;
                        var str = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 47 "CiscoShowInventory.peg"
                          str
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.SN(ref cursor);
                if (r5 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                        #line 48 "CiscoShowInventory.peg"
        ""
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<IList<string>> WS(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "  \t\t\r\r\n\n");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> Comma(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ",");
            return r0;
        }

        private IParseResult<string> Name(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "NAME:");
            return r0;
        }

        private IParseResult<string> Descr(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "DESCR:");
            return r0;
        }

        private IParseResult<string> PID(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "PID:");
            return r0;
        }

        private IParseResult<string> VID(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "VID:");
            return r0;
        }

        private IParseResult<string> SN(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "SN:");
            return r0;
        }

        private IParseResult<string> Quote(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "\"");
            return r0;
        }

        private IParseResult<string> QuotedString(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.Quote(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var strStart = cursor;
                r2 = this.QuotedStringChars(ref cursor);
                var strEnd = cursor;
                var str = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.Quote(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 79 "CiscoShowInventory.peg"
                                          str
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> QuotedStringChars(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var iStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "\"\"", negated: true);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var iEnd = cursor;
            var i = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 82 "CiscoShowInventory.peg"
                string.Concat(i)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> String(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var iStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseClass(ref cursor, "AZ");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseClass(ref cursor, "AZ09--//");
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var iEnd = cursor;
            var i = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 85 "CiscoShowInventory.peg"
                             string.Concat(i)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ciscoPrompt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseClass(ref cursor, "AZaz");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseClass(ref cursor, "AZaz09--__");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseClass(ref cursor, "##>>");
                    if (r4 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseAny(ref cursor);
            if (r1 == null)
            {
                r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
