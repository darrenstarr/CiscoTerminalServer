// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.2.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "CiscoShowIpInterfaceBrief.peg"
           TerminalServer.CiscoSession.Parsers
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "CiscoShowIpInterfaceBrief.peg"
       TerminalServer.CiscoSession.Model
        #line default
        ;
    using
        #line 4 "CiscoShowIpInterfaceBrief.peg"
       System.Net
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="CiscoShowIpInterfaceBrief" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.2.0")]
    public
    partial class
    #line 2 "CiscoShowIpInterfaceBrief.peg"
           CiscoShowIpInterfaceBrief
    #line default
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="CiscoShowIpInterfaceBrief" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="List&lt;ShowInterfaceBriefItem&gt;" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public List<ShowInterfaceBriefItem> Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.Interfaces(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse 'Interfaces'.");
            }
            return result.Value;
        }

        private IParseResult<
            #line 6 "CiscoShowIpInterfaceBrief.peg"
           List<ShowInterfaceBriefItem>
            #line default
            > Interfaces(ref Cursor cursor)
        {
            IParseResult<List<ShowInterfaceBriefItem>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.CLICommand(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.TableHeader(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IList<ShowInterfaceBriefItem>> r3 = null;
                    var eStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<ShowInterfaceBriefItem>();
                    while (true)
                    {
                        IParseResult<ShowInterfaceBriefItem> r4 = null;
                        r4 = this.Entry(ref cursor);
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r3 = this.ReturnHelper<IList<ShowInterfaceBriefItem>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    var eEnd = cursor;
                    var e = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ciscoPrompt(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.EOF(ref cursor);
                            if (r6 != null)
                            {
                                r0 = this.ReturnHelper<List<ShowInterfaceBriefItem>>(startCursor0, ref cursor, state =>
                                    #line 7 "CiscoShowIpInterfaceBrief.peg"
                                                     new List<ShowInterfaceBriefItem>(e)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> CLICommand(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.Line(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseLiteral(ref cursor, "show ip interface brief");
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> Line(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseClass(ref cursor, "nn", negated: true);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseClass(ref cursor, "\n\n");
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> TableHeader(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.WS(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "Interface");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.WS(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, "IP-Address");
                        if (r4 != null)
                        {
                            IParseResult<IList<string>> r5 = null;
                            r5 = this.WS(ref cursor);
                            if (r5 != null)
                            {
                                IParseResult<string> r6 = null;
                                r6 = this.ParseLiteral(ref cursor, "OK?");
                                if (r6 != null)
                                {
                                    IParseResult<IList<string>> r7 = null;
                                    r7 = this.WS(ref cursor);
                                    if (r7 != null)
                                    {
                                        IParseResult<string> r8 = null;
                                        r8 = this.ParseLiteral(ref cursor, "Method");
                                        if (r8 != null)
                                        {
                                            IParseResult<IList<string>> r9 = null;
                                            r9 = this.WS(ref cursor);
                                            if (r9 != null)
                                            {
                                                IParseResult<string> r10 = null;
                                                r10 = this.ParseLiteral(ref cursor, "Status");
                                                if (r10 != null)
                                                {
                                                    IParseResult<IList<string>> r11 = null;
                                                    r11 = this.WS(ref cursor);
                                                    if (r11 != null)
                                                    {
                                                        IParseResult<string> r12 = null;
                                                        r12 = this.ParseLiteral(ref cursor, "Protocol");
                                                        if (r12 != null)
                                                        {
                                                            IParseResult<IList<string>> r13 = null;
                                                            r13 = this.WS(ref cursor);
                                                            if (r13 != null)
                                                            {
                                                                {
                                                                    var len = cursor.Location - startCursor0.Location;
                                                                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                                                        state.Subject.Substring(startCursor0.Location, len)
                                                                        );
                                                                }
                                                            }
                                                            else
                                                            {
                                                                cursor = startCursor0;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            cursor = startCursor0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 18 "CiscoShowIpInterfaceBrief.peg"
      ShowInterfaceBriefItem
            #line default
            > Entry(ref Cursor cursor)
        {
            IParseResult<ShowInterfaceBriefItem> r0 = null;
            var startCursor0 = cursor;
            IParseResult<CiscoInterfaceId> r1 = null;
            var idStart = cursor;
            r1 = this.Interface(ref cursor);
            var idEnd = cursor;
            var id = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.WS(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IPAddress> r3 = null;
                    var ipStart = cursor;
                    r3 = this.IPAddressField(ref cursor);
                    var ipEnd = cursor;
                    var ip = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this.WS(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<bool> r5 = null;
                            var okStart = cursor;
                            r5 = this.OKState(ref cursor);
                            var okEnd = cursor;
                            var ok = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r6 = null;
                                r6 = this.WS(ref cursor);
                                if (r6 != null)
                                {
                                    IParseResult<EAddressAssignmentMethod> r7 = null;
                                    var methStart = cursor;
                                    r7 = this.Method(ref cursor);
                                    var methEnd = cursor;
                                    var meth = ValueOrDefault(r7);
                                    if (r7 != null)
                                    {
                                        IParseResult<IList<string>> r8 = null;
                                        r8 = this.WS(ref cursor);
                                        if (r8 != null)
                                        {
                                            IParseResult<EInterfaceStatus> r9 = null;
                                            var statStart = cursor;
                                            r9 = this.Status(ref cursor);
                                            var statEnd = cursor;
                                            var stat = ValueOrDefault(r9);
                                            if (r9 != null)
                                            {
                                                IParseResult<IList<string>> r10 = null;
                                                r10 = this.WS(ref cursor);
                                                if (r10 != null)
                                                {
                                                    IParseResult<EInterfaceStatus> r11 = null;
                                                    var protStart = cursor;
                                                    r11 = this.Protocol(ref cursor);
                                                    var protEnd = cursor;
                                                    var prot = ValueOrDefault(r11);
                                                    if (r11 != null)
                                                    {
                                                        IParseResult<IList<string>> r12 = null;
                                                        r12 = this.WS(ref cursor);
                                                        if (r12 != null)
                                                        {
                                                            r0 = this.ReturnHelper<ShowInterfaceBriefItem>(startCursor0, ref cursor, state =>
                                                                #line 19 "CiscoShowIpInterfaceBrief.peg"
                                                                                                      
		new ShowInterfaceBriefItem {
			InterfaceId = id,
			Address = ip,
			Ok = ok,
			Method = meth,
			Status = stat,
			ProtocolStatus = prot
		}
                                                                #line default
                                                                );
                                                        }
                                                        else
                                                        {
                                                            cursor = startCursor0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 30 "CiscoShowIpInterfaceBrief.peg"
          CiscoInterfaceId
            #line default
            > Interface(ref Cursor cursor)
        {
            IParseResult<CiscoInterfaceId> r0 = null;
            var startCursor0 = cursor;
            IParseResult<EInterfaceType> r1 = null;
            var aStart = cursor;
            r1 = this.InterfaceType(ref cursor);
            var aEnd = cursor;
            var a = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<CiscoInterfaceNumber> r2 = null;
                var bStart = cursor;
                r2 = this.InterfaceNumber(ref cursor);
                var bEnd = cursor;
                var b = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<CiscoInterfaceId>(startCursor0, ref cursor, state =>
                        #line 31 "CiscoShowIpInterfaceBrief.peg"
                                       new CiscoInterfaceId { InterfaceType = a, InterfaceNumber = b }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<EInterfaceType> InterfaceType(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            if (r0 == null)
            {
                r0 = this.VLanInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.EthernetInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.FastEthernetInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.GigabitEthernetInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.TenGigabitEthernetInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.PortchannelInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.LoopbackInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.TunnelInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.AsyncInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.NVIInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.UCSEInterface(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.EmbeddedServicesEngineInterface(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 47 "CiscoShowIpInterfaceBrief.peg"
              EInterfaceType
            #line default
            > VLanInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Vlan");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 48 "CiscoShowIpInterfaceBrief.peg"
            EInterfaceType.VLan
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 50 "CiscoShowIpInterfaceBrief.peg"
                  EInterfaceType
            #line default
            > EthernetInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Ethernet");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 51 "CiscoShowIpInterfaceBrief.peg"
                EInterfaceType.Ethernet
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 53 "CiscoShowIpInterfaceBrief.peg"
                      EInterfaceType
            #line default
            > FastEthernetInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "FastEthernet");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 54 "CiscoShowIpInterfaceBrief.peg"
                    EInterfaceType.FastEthernet
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 56 "CiscoShowIpInterfaceBrief.peg"
                         EInterfaceType
            #line default
            > GigabitEthernetInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "GigabitEthernet");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 57 "CiscoShowIpInterfaceBrief.peg"
                       EInterfaceType.GigabitEthernet
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 59 "CiscoShowIpInterfaceBrief.peg"
                            EInterfaceType
            #line default
            > TenGigabitEthernetInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Te");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 60 "CiscoShowIpInterfaceBrief.peg"
          EInterfaceType.TenGigabitEthernet
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 62 "CiscoShowIpInterfaceBrief.peg"
                     EInterfaceType
            #line default
            > PortchannelInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Port-channel");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 63 "CiscoShowIpInterfaceBrief.peg"
                    EInterfaceType.PortChannel
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 65 "CiscoShowIpInterfaceBrief.peg"
                  EInterfaceType
            #line default
            > LoopbackInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Loopback");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 66 "CiscoShowIpInterfaceBrief.peg"
                EInterfaceType.Loopback
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 68 "CiscoShowIpInterfaceBrief.peg"
                EInterfaceType
            #line default
            > TunnelInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Tunnel");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 69 "CiscoShowIpInterfaceBrief.peg"
              EInterfaceType.Tunnel
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 71 "CiscoShowIpInterfaceBrief.peg"
               EInterfaceType
            #line default
            > AsyncInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Async");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 72 "CiscoShowIpInterfaceBrief.peg"
             EInterfaceType.Async
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 74 "CiscoShowIpInterfaceBrief.peg"
             EInterfaceType
            #line default
            > NVIInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "NVI");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 75 "CiscoShowIpInterfaceBrief.peg"
           EInterfaceType.NVI
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 77 "CiscoShowIpInterfaceBrief.peg"
              EInterfaceType
            #line default
            > UCSEInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "ucse");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 78 "CiscoShowIpInterfaceBrief.peg"
            EInterfaceType.UCSE
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 80 "CiscoShowIpInterfaceBrief.peg"
                                EInterfaceType
            #line default
            > EmbeddedServicesEngineInterface(ref Cursor cursor)
        {
            IParseResult<EInterfaceType> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Embedded-Service-Engine");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceType>(startCursor0, ref cursor, state =>
                    #line 81 "CiscoShowIpInterfaceBrief.peg"
                               EInterfaceType.EmbeddedServicesEngine
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 82 "CiscoShowIpInterfaceBrief.peg"
                CiscoInterfaceNumber
            #line default
            > InterfaceNumber(ref Cursor cursor)
        {
            IParseResult<CiscoInterfaceNumber> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<int> r1 = null;
                var aStart = cursor;
                r1 = this.Number(ref cursor);
                var aEnd = cursor;
                var a = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.ParseLiteral(ref cursor, "/");
                    if (r2 != null)
                    {
                        IParseResult<int> r3 = null;
                        var bStart = cursor;
                        r3 = this.Number(ref cursor);
                        var bEnd = cursor;
                        var b = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            IParseResult<string> r4 = null;
                            r4 = this.ParseLiteral(ref cursor, "/");
                            if (r4 != null)
                            {
                                IParseResult<int> r5 = null;
                                var cStart = cursor;
                                r5 = this.Number(ref cursor);
                                var cEnd = cursor;
                                var c = ValueOrDefault(r5);
                                if (r5 != null)
                                {
                                    IParseResult<string> r6 = null;
                                    r6 = this.ParseLiteral(ref cursor, "/");
                                    if (r6 != null)
                                    {
                                        IParseResult<int> r7 = null;
                                        var dStart = cursor;
                                        r7 = this.Number(ref cursor);
                                        var dEnd = cursor;
                                        var d = ValueOrDefault(r7);
                                        if (r7 != null)
                                        {
                                            r0 = this.ReturnHelper<CiscoInterfaceNumber>(startCursor0, ref cursor, state =>
                                                #line 83 "CiscoShowIpInterfaceBrief.peg"
                                                     new CiscoInterfaceNumber { Chassis=a, LineCard=b, Module=c, Port=d }
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<int> r8 = null;
                var aStart = cursor;
                r8 = this.Number(ref cursor);
                var aEnd = cursor;
                var a = ValueOrDefault(r8);
                if (r8 != null)
                {
                    IParseResult<string> r9 = null;
                    r9 = this.ParseLiteral(ref cursor, "/");
                    if (r9 != null)
                    {
                        IParseResult<int> r10 = null;
                        var bStart = cursor;
                        r10 = this.Number(ref cursor);
                        var bEnd = cursor;
                        var b = ValueOrDefault(r10);
                        if (r10 != null)
                        {
                            IParseResult<string> r11 = null;
                            r11 = this.ParseLiteral(ref cursor, "/");
                            if (r11 != null)
                            {
                                IParseResult<int> r12 = null;
                                var cStart = cursor;
                                r12 = this.Number(ref cursor);
                                var cEnd = cursor;
                                var c = ValueOrDefault(r12);
                                if (r12 != null)
                                {
                                    r0 = this.ReturnHelper<CiscoInterfaceNumber>(startCursor1, ref cursor, state =>
                                        #line 84 "CiscoShowIpInterfaceBrief.peg"
                                        new CiscoInterfaceNumber { LineCard=a, Module=b, Port=c }
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<int> r13 = null;
                var aStart = cursor;
                r13 = this.Number(ref cursor);
                var aEnd = cursor;
                var a = ValueOrDefault(r13);
                if (r13 != null)
                {
                    IParseResult<string> r14 = null;
                    r14 = this.ParseLiteral(ref cursor, "/");
                    if (r14 != null)
                    {
                        IParseResult<int> r15 = null;
                        var bStart = cursor;
                        r15 = this.Number(ref cursor);
                        var bEnd = cursor;
                        var b = ValueOrDefault(r15);
                        if (r15 != null)
                        {
                            r0 = this.ReturnHelper<CiscoInterfaceNumber>(startCursor2, ref cursor, state =>
                                #line 85 "CiscoShowIpInterfaceBrief.peg"
                           new CiscoInterfaceNumber { Module=a, Port=b }
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<int> r16 = null;
                var aStart = cursor;
                r16 = this.Number(ref cursor);
                var aEnd = cursor;
                var a = ValueOrDefault(r16);
                if (r16 != null)
                {
                    r0 = this.ReturnHelper<CiscoInterfaceNumber>(startCursor3, ref cursor, state =>
                        #line 86 "CiscoShowIpInterfaceBrief.peg"
              new CiscoInterfaceNumber { Port=a }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 88 "CiscoShowIpInterfaceBrief.peg"
               IPAddress
            #line default
            > IPAddressField(ref Cursor cursor)
        {
            IParseResult<IPAddress> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IPAddress> r1 = null;
                var aStart = cursor;
                r1 = this.Unassigned(ref cursor);
                var aEnd = cursor;
                var a = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<IPAddress>(startCursor0, ref cursor, state =>
                        #line 89 "CiscoShowIpInterfaceBrief.peg"
                  a
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<IPAddress> r2 = null;
                var aStart = cursor;
                r2 = this.IPAddress(ref cursor);
                var aEnd = cursor;
                var a = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<IPAddress>(startCursor1, ref cursor, state =>
                        #line 90 "CiscoShowIpInterfaceBrief.peg"
                 a
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 92 "CiscoShowIpInterfaceBrief.peg"
           IPAddress
            #line default
            > Unassigned(ref Cursor cursor)
        {
            IParseResult<IPAddress> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "unassigned");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<IPAddress>(startCursor0, ref cursor, state =>
                    #line 93 "CiscoShowIpInterfaceBrief.peg"
                  null
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 95 "CiscoShowIpInterfaceBrief.peg"
          IPAddress
            #line default
            > IPAddress(ref Cursor cursor)
        {
            IParseResult<IPAddress> r0 = null;
            var startCursor0 = cursor;
            IParseResult<int> r1 = null;
            var aStart = cursor;
            r1 = this.Number(ref cursor);
            var aEnd = cursor;
            var a = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, ".");
                if (r2 != null)
                {
                    IParseResult<int> r3 = null;
                    var bStart = cursor;
                    r3 = this.Number(ref cursor);
                    var bEnd = cursor;
                    var b = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, ".");
                        if (r4 != null)
                        {
                            IParseResult<int> r5 = null;
                            var cStart = cursor;
                            r5 = this.Number(ref cursor);
                            var cEnd = cursor;
                            var c = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                IParseResult<string> r6 = null;
                                r6 = this.ParseLiteral(ref cursor, ".");
                                if (r6 != null)
                                {
                                    IParseResult<int> r7 = null;
                                    var dStart = cursor;
                                    r7 = this.Number(ref cursor);
                                    var dEnd = cursor;
                                    var d = ValueOrDefault(r7);
                                    if (r7 != null)
                                    {
                                        r0 = this.ReturnHelper<IPAddress>(startCursor0, ref cursor, state =>
                                            #line 96 "CiscoShowIpInterfaceBrief.peg"
                                                     new IPAddress(new byte[] { Convert.ToByte(a), Convert.ToByte(b), Convert.ToByte(c), Convert.ToByte(d) })
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<bool> OKState(ref Cursor cursor)
        {
            IParseResult<bool> r0 = null;
            if (r0 == null)
            {
                r0 = this.YES(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.NO(ref cursor);
            }
            return r0;
        }

        private IParseResult<EAddressAssignmentMethod> Method(ref Cursor cursor)
        {
            IParseResult<EAddressAssignmentMethod> r0 = null;
            if (r0 == null)
            {
                r0 = this.NVRAM(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.DHCP(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.Unset(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.Manual(ref cursor);
            }
            return r0;
        }

        private IParseResult<EInterfaceStatus> Status(ref Cursor cursor)
        {
            IParseResult<EInterfaceStatus> r0 = null;
            if (r0 == null)
            {
                r0 = this.Up(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.Down(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.AdministrativelyDown(ref cursor);
            }
            return r0;
        }

        private IParseResult<EInterfaceStatus> Protocol(ref Cursor cursor)
        {
            IParseResult<EInterfaceStatus> r0 = null;
            if (r0 == null)
            {
                r0 = this.Up(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.Down(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 117 "CiscoShowIpInterfaceBrief.peg"
   EInterfaceStatus
            #line default
            > Up(ref Cursor cursor)
        {
            IParseResult<EInterfaceStatus> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "up");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceStatus>(startCursor0, ref cursor, state =>
                    #line 118 "CiscoShowIpInterfaceBrief.peg"
          EInterfaceStatus.Up
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 120 "CiscoShowIpInterfaceBrief.peg"
     EInterfaceStatus
            #line default
            > Down(ref Cursor cursor)
        {
            IParseResult<EInterfaceStatus> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "down");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceStatus>(startCursor0, ref cursor, state =>
                    #line 121 "CiscoShowIpInterfaceBrief.peg"
            EInterfaceStatus.Down
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 123 "CiscoShowIpInterfaceBrief.peg"
                     EInterfaceStatus
            #line default
            > AdministrativelyDown(ref Cursor cursor)
        {
            IParseResult<EInterfaceStatus> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "administratively down");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EInterfaceStatus>(startCursor0, ref cursor, state =>
                    #line 124 "CiscoShowIpInterfaceBrief.peg"
                             EInterfaceStatus.AdministrativelyDown
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 126 "CiscoShowIpInterfaceBrief.peg"
      EAddressAssignmentMethod
            #line default
            > NVRAM(ref Cursor cursor)
        {
            IParseResult<EAddressAssignmentMethod> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "NVRAM");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EAddressAssignmentMethod>(startCursor0, ref cursor, state =>
                    #line 127 "CiscoShowIpInterfaceBrief.peg"
             EAddressAssignmentMethod.NVRAM
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 129 "CiscoShowIpInterfaceBrief.peg"
     EAddressAssignmentMethod
            #line default
            > DHCP(ref Cursor cursor)
        {
            IParseResult<EAddressAssignmentMethod> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "DHCP");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EAddressAssignmentMethod>(startCursor0, ref cursor, state =>
                    #line 130 "CiscoShowIpInterfaceBrief.peg"
            EAddressAssignmentMethod.DHCP
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 132 "CiscoShowIpInterfaceBrief.peg"
      EAddressAssignmentMethod
            #line default
            > Unset(ref Cursor cursor)
        {
            IParseResult<EAddressAssignmentMethod> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "unset");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EAddressAssignmentMethod>(startCursor0, ref cursor, state =>
                    #line 133 "CiscoShowIpInterfaceBrief.peg"
             EAddressAssignmentMethod.Unset
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 135 "CiscoShowIpInterfaceBrief.peg"
       EAddressAssignmentMethod
            #line default
            > Manual(ref Cursor cursor)
        {
            IParseResult<EAddressAssignmentMethod> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "manual");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<EAddressAssignmentMethod>(startCursor0, ref cursor, state =>
                    #line 136 "CiscoShowIpInterfaceBrief.peg"
              EAddressAssignmentMethod.Manual
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 138 "CiscoShowIpInterfaceBrief.peg"
    bool
            #line default
            > YES(ref Cursor cursor)
        {
            IParseResult<bool> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "YES");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<bool>(startCursor0, ref cursor, state =>
                    #line 139 "CiscoShowIpInterfaceBrief.peg"
           true
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 141 "CiscoShowIpInterfaceBrief.peg"
   bool
            #line default
            > NO(ref Cursor cursor)
        {
            IParseResult<bool> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "NO");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<bool>(startCursor0, ref cursor, state =>
                    #line 142 "CiscoShowIpInterfaceBrief.peg"
          false
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 144 "CiscoShowIpInterfaceBrief.peg"
       int
            #line default
            > Number(ref Cursor cursor)
        {
            IParseResult<int> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var iStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.Digit(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var iEnd = cursor;
            var i = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<int>(startCursor0, ref cursor, state =>
                    #line 145 "CiscoShowIpInterfaceBrief.peg"
              Convert.ToInt32(string.Concat(i))
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> Digit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09");
            return r0;
        }

        private IParseResult<IList<string>> WS(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "  \t\t\n\n\r\r");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ciscoPrompt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseClass(ref cursor, "AZaz");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseClass(ref cursor, "AZaz09--__");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseClass(ref cursor, "##>>");
                    if (r4 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseAny(ref cursor);
            if (r1 == null)
            {
                r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
